// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UWS_BACK.Data;

#nullable disable

namespace UWS_BACK.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241214103805_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UWS_BACK.Models.AuthenticationModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Authentications");
                });

            modelBuilder.Entity("UWS_BACK.Models.DriverModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TruckId")
                        .IsUnique()
                        .HasFilter("[TruckId] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("UWS_BACK.Models.FeedbackModel", b =>
                {
                    b.Property<int>("feedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedbackId"));

                    b.Property<string>("feedbackDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("feedbackResponse")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("feedbackSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("feedbackStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("feedbackSubject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("feedbackType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("feedbackId");

                    b.HasIndex("userId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("UWS_BACK.Models.LocationModel", b =>
                {
                    b.Property<int>("locationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("locationId"));

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<string>("locationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("locationOrder")
                        .HasColumnType("int");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.HasKey("locationId");

                    b.HasIndex("routeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("UWS_BACK.Models.PublicReportModel", b =>
                {
                    b.Property<int>("reportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reportId"));

                    b.Property<string>("reportAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reportDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("reportImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("reportScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("reportSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("reportStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("reportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("reportId");

                    b.HasIndex("userId");

                    b.ToTable("PublicReports");
                });

            modelBuilder.Entity("UWS_BACK.Models.RouteModel", b =>
                {
                    b.Property<int>("routeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("routeId"));

                    b.Property<string>("routeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("routeId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("UWS_BACK.Models.ScheduleModel", b =>
                {
                    b.Property<int>("scheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("scheduleId"));

                    b.Property<string>("ElectricalWasteDates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetalWasteDates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaperWasteDates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("driverId")
                        .HasColumnType("int");

                    b.Property<int?>("routeId")
                        .HasColumnType("int");

                    b.Property<int?>("truckId")
                        .HasColumnType("int");

                    b.HasKey("scheduleId");

                    b.HasIndex("driverId");

                    b.HasIndex("routeId");

                    b.HasIndex("truckId");

                    b.ToTable("ScheduleModel");
                });

            modelBuilder.Entity("UWS_BACK.Models.SpecialPickupModel", b =>
                {
                    b.Property<int>("pickupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pickupId"));

                    b.Property<string>("pickupDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("pickupImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("pickupPreferedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("pickupScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("pickupSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("pickupStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("pickupType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("pickupWeight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("pickupId");

                    b.HasIndex("userId");

                    b.ToTable("SpecialPickups");
                });

            modelBuilder.Entity("UWS_BACK.Models.TruckModel", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckId"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TruckId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("UWS_BACK.Models.UsersModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("routeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("routeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UWS_BACK.Models.DriverModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.RouteModel", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UWS_BACK.Models.TruckModel", "Truck")
                        .WithOne("Driver")
                        .HasForeignKey("UWS_BACK.Models.DriverModel", "TruckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Route");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("UWS_BACK.Models.FeedbackModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.UsersModel", "Profile")
                        .WithMany("Feedbacks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("UWS_BACK.Models.LocationModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.RouteModel", "Route")
                        .WithMany("Locations")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Route");
                });

            modelBuilder.Entity("UWS_BACK.Models.PublicReportModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.UsersModel", "Profile")
                        .WithMany("PublicReports")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("UWS_BACK.Models.ScheduleModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.DriverModel", "Driver")
                        .WithMany()
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UWS_BACK.Models.RouteModel", "Route")
                        .WithMany()
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UWS_BACK.Models.TruckModel", "Truck")
                        .WithMany()
                        .HasForeignKey("truckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("UWS_BACK.Models.SpecialPickupModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.UsersModel", "Profile")
                        .WithMany("SpecialPickups")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("UWS_BACK.Models.TruckModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.RouteModel", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Route");
                });

            modelBuilder.Entity("UWS_BACK.Models.UsersModel", b =>
                {
                    b.HasOne("UWS_BACK.Models.AuthenticationModel", "Authentication")
                        .WithOne("User")
                        .HasForeignKey("UWS_BACK.Models.UsersModel", "UserId");

                    b.HasOne("UWS_BACK.Models.RouteModel", "Route")
                        .WithMany("Users")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Authentication");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("UWS_BACK.Models.AuthenticationModel", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("UWS_BACK.Models.RouteModel", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UWS_BACK.Models.TruckModel", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("UWS_BACK.Models.UsersModel", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("PublicReports");

                    b.Navigation("SpecialPickups");
                });
#pragma warning restore 612, 618
        }
    }
}
